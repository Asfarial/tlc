def convert_orig(self, filename: str, format: str):
    df = pd.read_csv(filename, converters={
        'VendorID': self.conv_int,
        'lpep_pickup_datetime': self.conv_str,
        'lpep_dropoff_datetime': self.conv_str,
        'store_and_fwd_flag': self.conv_str,
        'RatecodeID': self.conv_int,
        'PULocationID': self.conv_int,
        'DOLocationID': self.conv_int,
        'passenger_count': self.conv_int,
        'trip_distance': self.conv_float,
        'fare_amount': self.conv_float,
        'extra': self.conv_float,
        'mta_tax': self.conv_float,
        'tip_amount': self.conv_float,
        'tolls_amount': self.conv_float,
        'ehail_fee': self.conv_float,
        'improvement_surcharge': self.conv_float,
        'total_amount': self.conv_float,
        'payment_type': self.conv_int,
        'trip_type': self.conv_int,
        'congestion_surcharge': self.conv_float})
    if format == 'avro':
        self.to_avro(df, filename)

def to_avro(self, df, filename:str):
    def avro_filename(name:str):
        return '.'+name.strip('.').split('.')[0]+'.avro'
    parsed_schema = parse_schema(self.avro_schema)
    records = df.to_dict('records')
    with open(avro_filename(filename), 'wb') as out:
        writer(out, parsed_schema, records)